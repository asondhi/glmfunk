test_data
test_data$x1_pred
hist(test_data$x1_pred)
# generate data
n = 10000
# x1, x2 binary
x1 = c(rbinom(n, 1, 0.5))
x2 = c(rbinom(n, 1, 0.5))
y = x1 + rnorm(n)
data = data.frame(y, x1)
# Randomly flip 20% of x1 observations
data$x1_noisy = abs(data$x1 - 1*(runif(n) < 0.2))
# Split into calibration and test sets
train_ind = sample(1:n, size = n/2, replace = FALSE)
test_ind = setdiff(1:n, train_ind)
calib_data = data[train_ind,]
test_data = data[test_ind,]
# Calibrate x1
calib_m = glm(x1 ~ x1_noisy, family = binomial, data = calib_data)
# Check calibration
test_data$x1_pred = predict(calib_m, newdata = test_data, type = "response")
with(test_data, table(x1_pred, x1))
# Fit models with true x1, noisy x1, and calibrated x1 probability
lm(y ~ x1, data = test_data)
lm(y ~ x1_noisy, data = test_data)
lm(y ~ x1_pred, data = test_data)
# Fit model by drawing samples from calibrated x1 probability
boot = NULL
for (i in 1:500) {
fit_ind <- sample(1:nrow(test_data), size = nrow(test_data), replace = TRUE)
data_fit <- test_data[fit_ind,]
data_fit$x1_calib <- rbinom(nrow(test_data), 1, data_fit$x1_pred)
fit_i <- lm(y ~ x1_calib, data = data_fit)
boot = rbind(boot, coef(fit_i))
}
apply(boot, 2, median)
p = c(rep(0.8, 500), seq(0.2, 500))
p
p = c(rep(0.8, 500), rep(0.2, 500))
p
sd(p)
mean(p)
sd(p)
sd(rbind(1000, 1, p))
sd(rbinom(1000, 1, p))
sd(p)
sd(rbinom(1000, 1, p))
mean(rbinom(1000, 1, p))
mean(rbinom(1000, 1, p))
mean(rbinom(1000, 1, p))
mean(rbinom(1000, 1, p))
mean(rbinom(1000, 1, p))
mean(rbinom(1000, 1, p))
mean(p)
mean(p)
var(rbinom(1000, 1, p))
var(rbinom(1000, 1, p))
var(rbinom(1000, 1, p))
var(p)
var(p)
var(p)
p
x = rbinom(1000, 1, p)
y = x + rnorm(1000)
lm(y, x)
lm(y~x)
lm(y~p)
data = data.frame(y, x, p)
boot <- NULL
for (i in 1:500) {
fit_ind <- sample(1:1000, size = 1000, replace = TRUE)
data_fit <- data[fit_ind,]
data_fit$x1_calib <- rbinom(nrow(data_fit), 1, data_fit$p)
fit_i <- lm(y ~ x1_calib, data = data_fit)
boot <- rbind(boot, coef(fit_i))
}
apply(boot, 2, median)
x
p
head(data_fit)
with(data_fit, table(x, x1_calib))
with(data_fit, table(x, p))
0.9^2
0.95^2
0.99^2
rexp(1000)
T = rexp(1000)
T
T = sort(T)
T
t[1:800]
summary(T[1:800])
summary(T)
y= rnorm(100)
x = rnorm(100)
lm(y~x)
library(devtools)
install_github("moreno-betancur/mice")
datmis <- data.frame(X = rbinom(1000, 1, 0.5)) %>%
mutate(Y = rnorm(1000),
Z = rbinom(1000, 2, 0.5))
library(tidyverse)
library(mice)
datmis <- data.frame(X = rbinom(1000, 1, 0.5)) %>%
mutate(Y = rnorm(1000),
Z = rbinom(1000, 2, 0.5))
datmis
datmis <- data.frame(X = rbinom(1000, 1, 0.5)) %>%
mutate(Y = rnorm(1000),
Z = rbinom(1000, 2, 0.5)) %>%
as_tibble()
datmis
datmis <- datamis %>%
mutate(Y_miss = rbinom(n(), 1, 0.2) == 1,
Y = ifelse(Y_miss, NA, Y))
datmis <- datmis %>%
mutate(Y_miss = rbinom(n(), 1, 0.2) == 1,
Y = ifelse(Y_miss, NA, Y))
datmis
datmis$Y
summary(datmis$Y)
ncol(datmis)
datmis
datmis <- data.frame(X = rbinom(1000, 1, 0.5)) %>%
mutate(Y = rnorm(1000),
Z = rbinom(1000, 2, 0.5)) %>%
as_tibble()
datmis <- datmis %>%
mutate(Y_miss = rbinom(n(), 1, 0.2) == 1,
Y = ifelse(Y_miss, NA, Y)) %>%
select(-Y_miss)
ncol(datmis)
pSens<-rep(list(list("")), ncol(datmis))
names(pSens)<-names(datmis)
pSens
pSens[["Y"]]
pSens[["Y"]]<-list(1:3)
pSens
>mice
?mice
datmis
impNARFCS<-mice(datmis,m=5, method=c("","normSens",""),  form=c("","~1+X+Z",""),
formSens=c("","~1",""), parmSens=pSens, seed=234235,print=F)
pSens
pSens<-rep(list(list("")), ncol(datmis))
names(pSens)<-names(datmis)
pSens[["Y"]]<-1
pSens
impNARFCS<-mice(datmis,m=5, method=c("","normSens",""),  form=c("","~1+X+Z",""),
formSens=c("","~1",""), parmSens=pSens, seed=234235,print=F)
impNARFCS
pSens[["Y"]]<-list(1, 2, 3)
[["Y"]]
pSens
impNARFCS<-mice(datmis,m=5, method=c("","normSens",""),  form=c("","~1+X+Z",""),
formSens=c("","~1",""), parmSens=pSens, seed=234235,print=F)
pSens<-rep(list(list("")), ncol(datmis))
names(pSens)<-names(datmis)
pSens[["Y"]]<-list(1)
pSens
impNARFCS<-mice(datmis,m=5, method=c("","normSens",""),  form=c("","~1+X+Z",""),
formSens=c("","~1",""), parmSens=pSens, seed=234235,print=F)
impNARFCS
pool(with(impNARFCS,lm(Y~X+Z)))$qbar
pSens<-rep(list(list("")), ncol(datmis))
names(pSens)<-names(datmis)
pSens[["Y"]]<-list(10)
pSens
impNARFCS<-mice(datmis,m=5, method=c("","normSens",""),  form=c("","~1+X+Z",""),
formSens=c("","~1",""), parmSens=pSens, seed=234235,print=F)
pool(with(impNARFCS,lm(Y~X+Z)))$qbar
impNARFCS
names(impNARFCS)
summary(impNARFCS)
?complete.mice
impNARFCS
complete(impNARFCS)
complete(impNARFCS, action = 1)
complete(impNARFCS, action = 1)$Y
y1 = complete(impNARFCS, action = 1)$Y
y2 = complete(impNARFCS, action = 2)$Y
y3 = complete(impNARFCS, action = 3)$Y
complete(impNARFCS, action = 7)$Y
y1
y2
y1-y2
y1-y3
?normSens
?pool
pool(impNARFCS)
with(impNARFCS, X)
pool(with(impNARFCS, X))
pool(with(impNARFCS, Y))
with(impNARFCS, Y)
pool(with(impNARFCS,lm(Y~X+Z)))
with(impNARFCS, Y)
xx = with(impNARFCS, Y)
xx
names(xx)
with(impNARFCS, Y)$analyses
xx = with(impNARFCS, Y)$analyses
xx
do.call("mean", xx)
xx
do.call("+", xx)
xx %>% as_tibble
as.data.frame(xx)
xx
Reduce("+", xx)
Reduce("+", xx) / length(xx)
num = 75000
den = 125000000
num/den
num/den * 100
1.6 ^ 100
0.6 * log(0.8)
exp(0.6 * log(0.8))
x1 = rbinom(1000, 1, 0.5)
x2 = rbinom(1000, 1, 0.5)
y = x1 + x2 + rnorm(1000)
m = lm(y ~ x1 + x2)
d1 = mean(y[x1 == 1 & x2 == 1]) - mean(y[x1 == 0 & x2 == 1])
d0 = mean(y[x1 == 1 & x2 == 0]) - mean(y[x1 == 0 & x2 == 0])
table(x2)
mean(c(d0, d1))
m
(499/100)*d0 + (501/1000)*d1
(499/1000)*d0 + (501/1000)*d1
y = rbinom(1000, 1, pnorm(x1 + x2 + rnorm(1000)))
table(y)
table(x1,x2)
m = glm(y~ x1 + x2, family=binomial)
m
library(boot)
logit
d1 = mean(y[x1 == 1 & x2 == 1]) - mean(y[x1 == 0 & x2 == 1])
d1
d0 = mean(y[x1 == 1 & x2 == 0]) - mean(y[x1 == 0 & x2 == 0])
table(x2)
d1 = logit(mean(y[x1 == 1 & x2 == 1])) - logit(mean(y[x1 == 0 & x2 == 1]) )
d0 = logit(mean(y[x1 == 1 & x2 == 0])) - logit(mean(y[x1 == 0 & x2 == 0]) )
mean(c(d0, d1))
m
m2 = glm(y~ x1 , family=binomial)
m2
m2 = glm(y~ 0 + x1 , family=binomial)
m2
m2 = glm(y~ x1 , family=binomial)
m2
logit(mean(y[x1 == 1])) - logit(mean(y[x1 == 0]) )
library(survival)
library(tidyverse)
library(mice)
# toy linear regression example
CENS_PROB <- 0.2
CENS_FACTOR <- CENS_PROB / (1 - CENS_PROB)
# Generate data
n <- 10000
# x1 and x2 are binary with half of their observations equal
shared <- rbinom(n/2, 1, 0.5)
data <- data.frame(x1 = c(rbinom(n/2, 1, 0.5), shared),
x2 = c(rbinom(n/2, 1, 0.5), shared)) %>%
mutate(lambda = 0.1 * exp(log(0.5) * x1 + log(1.3) * x2),
surv_time = rexp(n, lambda),
cens_time = rexp(n, lambda * CENS_FACTOR),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time)) %>%
mutate(lp = 1.5 * x2,
eps = rnorm(n),
x1_noisy_prob = pnorm(x1 * (2 + lp) + (1 - x1) * (-2 + lp) + 1.5 * eps),
x1_noisy = rbinom(n, 1, x1_noisy_prob))
with(data, table(x1, x1_noisy))
# Generate noisy observation of x1, with 30% of values with x2 = 1 and 10% with x2 = 0 flipped
data$x1_noisy <- ifelse(data$x2 == 1,
abs(data$x1 - 1*(runif(n) < 0.3)),
abs(data$x1 - 1*(runif(n) < 0.1)))
data$x1_noisy_prob <- ifelse(data$x2 == 1,
abs(data$x1 - 1*(runif(n) < 0.3)),
abs(data$x1 - 1*(runif(n) < 0.1)))
head(data)
data$x1_noisy_prob
library(mice)
methods(mice)
?mice.impute.rf
x = rnorm(1000)
miss = rbinom(1000,1,0.4)
x_miss = sapply(1:1000, function(i) if (abs(x[i]) < 2 & miss[i] == 1) {NA} else {x[i]})
x_miss
summary(x_miss)
summary(x)
x_miss2 = sapply(1:1000, function(i) if ( miss[i] == 1) {NA} else {x[i]})
summary(x)
summary(x_miss2)
dnorm(2)
dnorm(-2)
x = rnorm(10000, mean = 2)
log(0.84) - log(0.8)
log(0.76) - log(0.8)
2 - sqrt(3)
log(2 - sqrt(3))
library(survival)
library(tidyverse)
library(mice)
# toy linear regression example
CENS_PROB <- 0.2
CENS_FACTOR <- CENS_PROB / (1 - CENS_PROB)
# Generate data
n <- 10000
# x1 and x2 are binary with half of their observations equal
data <- data.frame(c = rnorm(n),
x = rbinom(n)) %>%
mutate(lambda = 0.1 * exp(log(0.5) * x + log(1.3) * c),
surv_time = rexp(n, lambda),
cens_time = rexp(n, lambda * CENS_FACTOR),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
library(survival)
library(tidyverse)
library(mice)
# toy linear regression example
CENS_PROB <- 0.2
CENS_FACTOR <- CENS_PROB / (1 - CENS_PROB)
# Generate data
n <- 10000
# x1 and x2 are binary with half of their observations equal
data <- data.frame(c = rnorm(n),
x = rbinom(n, 1, 0.5)) %>%
mutate(lambda = 0.1 * exp(log(0.5) * x + log(1.3) * c),
surv_time = rexp(n, lambda),
cens_time = rexp(n, lambda * CENS_FACTOR),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
m = coxph(Surv(time, status) ~ x + c)
m = coxph(Surv(time, status) ~ x + c, data = data)
m
data
data %>%
group_by(x) %>%
summarise(log_haz = mean(log(lambda)))
log(0.5)
m = coxph(Surv(time, status) ~ x, data = data)
m
# x1 and x2 are binary with half of their observations equal
data <- data.frame(c = rnorm(n)) %>%
mutate(x = rbinom(n, 1, 0.1 + 0.4 * c),
lambda = 0.1 * exp(log(0.5) * x + log(1.3) * c),
surv_time = rexp(n, lambda),
cens_time = rexp(n, lambda * CENS_FACTOR),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
data <- data.frame(c = rnorm(n)) %>%
mutate(px = 0.1 + 0.4 * c,
x = rbinom(n, 1, px),
lambda = 0.1 * exp(log(0.5) * x + log(1.3) * c),
surv_time = rexp(n, lambda),
cens_time = rexp(n, lambda * CENS_FACTOR),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
data.frame(c = rnorm(n)) %>%
mutate(px = 0.1 + 0.4 * c)
data <- data.frame(c = rbinom(n, 1, 0.5)) %>%
mutate(px = 0.1 + 0.4 * c,
x = rbinom(n, 1, px),
lambda = 0.1 * exp(log(0.5) * x + log(1.3) * c),
surv_time = rexp(n, lambda),
cens_time = rexp(n, lambda * CENS_FACTOR),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
data
m = coxph(Surv(time, status) ~ x + c, data = data)
coxph(Surv(time, status) ~ x + c, data = data)
coxph(Surv(time, status) ~ x + c, data = data)
coxph(Surv(time, status) ~ x, data = data)
data %>%
group_by(x) %>%
summarise(log_haz = mean(log(lambda)))
-2.78 + 2.21
data %>%
group_by(c, x) %>%
summarise(log_haz = mean(log(lambda)))
data %>%
group_by(c, x) %>%
summarise(log_haz = mean(log(lambda)),
n = n())
-3 + 2.3
-2.73 + 2.04
coxph(Surv(time, status) ~ x + c, data = data)
data %>%
group_by(c, x) %>%
summarise(log_haz = mean(log(lambda)),
w = n() / n)
-3.00 * 0.0505 + -2.73 * 0.254
-2.30 * 0.446 + -2.04 * 0.249
-0.84492 - -1.53376
log(0.5)
data %>%
group_by(c, x) %>%
summarise(log_haz = mean(log(lambda)),
w = n() / n)
data %>%
filter(status == 1) %>%
group_by(c, x) %>%
summarise(log_haz = mean(log(lambda)),
w = n() / n)
0.7 * (0.355 + 0.0395)
-2.73 - 2.04
-2.73 - -2.04
-0.69 * (0.405)
-0.69 * (0.405) + 0.7 * (0.355 + 0.0395)
-0.69 * (0.405) + -0.7 * (0.355 + 0.0395)
data %>%
filter(status == 1)
data %>%
filter(status == 1) %>%
group_by(c, x) %>%
summarise(log_haz = mean(log(lambda)),
w = n()) %>%
ungroup() %>%
mutate(w = w / sum(w))
126/6
126/7
126/8
126+42
168/6
168/7
168/8
8*3*7
8*7*3
21*2
21*3
21*4
84/8
21*5
21*5 / 8
21*6 / 8
21*7 / 8
21*8 / 8
7^20
14 - 9
16 - 9
86841 / 9
library(forecast)
install.packages("forecast")
library(forecast)
# create some artifical data
modelfitsample <- data.frame(Customer_Visit=rpois(49,3000),Weekday=rep(1:7,7),
Christmas=c(rep(0,40),1,rep(0,8)),Day=1:49)
modelfitsample
# Create matrix of numeric predictors
xreg <- cbind(Weekday=model.matrix(~as.factor(modelfitsample$Weekday)),
Day=modelfitsample$Day,
Christmas=modelfitsample$Christmas)
xreg
xreg <- xreg[,-1]
xreg
colnames(xreg) <- c("Mon","Tue","Wed","Thu","Fri","Sat","Day","Christmas")
# Variable to be modelled
visits <- ts(modelfitsample$Customer_Visit, frequency=7)
visits
# Find ARIMAX model
modArima <- auto.arima(visits, xreg=xreg)
modArima
plot(modArima)
summary(modArima)
?forecast
visits
visits[1:4]
modelfitsample$Customer_Visit
xreg
modelfitsample$Customer_Visit[1:40]
xreg_train <- xreg[1:40,]
visits_train <- ts(modelfitsample$Customer_Visit[1:40], frequency=7)
modArima <- auto.arima(visits_train, xreg=xreg_train)
xreg_train
visits_train
modArima <- auto.arima(visits_train, xreg=xreg_train)
library(forecast)
# create some artifical data
modelfitsample <- data.frame(Customer_Visit=rpois(490,3000),Weekday=rep(1:7,70),
Day=1:490)
modelfitsample
xreg <- cbind(Weekday=model.matrix(~as.factor(modelfitsample$Weekday)),
Day=modelfitsample$Day,
Christmas=modelfitsample$Christmas)
xreg <- xreg[,-1]
colnames(xreg) <- c("Mon","Tue","Wed","Thu","Fri","Sat","Day")
visits <- ts(modelfitsample$Customer_Visit, frequency=7)
visits
plot(visits)
# Find ARIMAX model
modArima <- auto.arima(visits, xreg=xreg)
modArima
xreg_train <- xreg[1:400,]
visits_train <- ts(modelfitsample$Customer_Visit[1:400], frequency=7)
modArima <- auto.arima(visits_train, xreg=xreg_train)
modArima
xreg_test <- xreg[401:490,]
forecast(modArima)
forecast(modArima, xreg = xreg_test)
forecast(modArima, xreg = xreg_test
ff <- forecast(modArima, xreg = xreg_test)
ff <- forecast(modArima, xreg = xreg_test)
ff
names(ff)
ff$mean
as.numeric(ff$mean)
as.numeric(ff$mean) - modelfitsample$Customer_Visit[401:490]
plot(as.numeric(ff$mean) - modelfitsample$Customer_Visit[401:490])
plot(as.numeric(ff$mean) / modelfitsample$Customer_Visit[401:490])
setwd("~/glmfunk")
Rcpp::compileAttributes()
?Rcpp::compileAttributes()
