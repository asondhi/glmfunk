time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.3 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.4 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.5 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.5 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.5 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.5 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.5 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
data <- data.frame(cov = rnorm(1000, sd = 1)) %>%
mutate(trt = rbinom(1000, 1, 0.5),
entry = rexp(1000, 2*exp(bcov * cov)),
time = rexp(1000, 0.5 * exp(beta * trt + bcov * cov)),
status = 1)
data_lt <- data %>% filter(time > entry)
coxph(Surv(entry, time, status) ~ entry,
data = data_lt,
control = coxph.control(timefix = FALSE))
library(MASS)
x = mvrnorm(100, numeric(5), diag(5))
xx = t(x) %*% x
xx
eigen(x)
eigen(xx)
vv = eigen(xx)$vectors
vv
vv[,1]
vv[,1] * v[,2]
vv[,1] * vv[,2]
sum(vv[,1] * vv[,2])
sum(2*vv[,1] * 3*vv[,2])
sum(vv[,1] * 3*vv[,2])
sum((70* vv[,1]) * (3 * vv[,2]))
library(boot)
data("channing")
data = channing
data
head(data)
library(survival)
m = coxph(Surv(entry, exit, 1-cens) ~ entry)
m = coxph(Surv(entry, exit, 1-cens) ~ entry, data=data)
m
m = coxph(Surv(entry, exit, cens) ~ entry, data=data)
m
m = coxph(Surv(entry, exit, cens) ~ poly(entry, 3), data=data)
m
plot(m)
m = coxph(Surv(entry, exit, cens) ~ entry + sex, data=data)
m
confint(m)
exp(confint(m))
v = 6:9
v
v[c(1,2,3)]
v[c(1,2,3)] = 0
v
v = 6:9
v[c(1,2,3)] = c(11,12)
v
v=6:9
v[c(1,2,3)] = c(11,12,13)
v
v=6:9
v[c(1,1,2)] = 0
v
v = 6:9
v
v
v[c(1, 1, 3)] <- c(11, 12)
v
v = 6:9
v[c(1, 1, 3)] <- c(11, 12, 13)
v
choose(16, 2)
x = rnorm(1000)
trt_prob = plogis(1.1 * x)
summary(trt_prob)
trt_prob = plogis(2 * x)
summary(trt_prob)
hist(trt_prob)
trt_prob = plogis(1 + 2 * x)
hist(trt_prob)
trt_prob = plogis(1/2 + 2 * x)
hist(trt_prob)
data <- data.frame(x = rnorm(1000)) %>%
mutate(trt_prob = plogis(0.5 + 2 * x),
trt = rbinom(1000, 1, trt_prob),
lambda = 0.1 * exp(log(1.5) * trt + log(2) * x),
surv_time = rexp(1000, lambda),
cens_time = rexp(1000, lambda * 0.3 / 0.7),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
library(survival)
library(tidyverse)
data <- gendata()
m <- coxph(Surv(time, status) ~ trt + x, data = data)
gendata <- function() {
data <- data.frame(x = rnorm(1000)) %>%
mutate(trt_prob = plogis(0.5 + 2 * x),
trt = rbinom(1000, 1, trt_prob),
lambda = 0.1 * exp(log(1.5) * trt + log(2) * x),
surv_time = rexp(1000, lambda),
cens_time = rexp(1000, lambda * 0.3 / 0.7),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time))
return(data)
}
data <- gendata()
data
m <- coxph(Surv(time, status) ~ trt + x, data = data)
m
marg_est <- function(data) {
data0 <- data %>%
select(x) %>%
mutate(lambda = 0.1 * exp(log(2) * x),
surv_time = rexp(1000, lambda),
cens_time = rexp(1000, lambda * 0.3 / 0.7),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time),
trt = 0)
data1 <- data %>%
select(x) %>%
mutate(lambda = 0.1 * exp(log(1.5) + log(2) * x),
surv_time = rexp(1000, lambda),
cens_time = rexp(1000, lambda * 0.3 / 0.7),
time = pmin(surv_time, cens_time),
status = 1*(surv_time < cens_time),
trt = 1)
data_cf <- bind_rows(data0, data1)
m <- coxph(Surv(time, status) ~ trt, data = data_cf)
return(m)
}
m
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
marg_est(data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt + x, data = data)
coxph(Surv(time, status) ~ trt, data = data)
coxph(Surv(time, status) ~ trt, data = data)
marg_est(data)
marg_est(data)
marg_est(data)
choose(16, 2)
choose(4,2)
iinstall.packages(randomForest)
install.packages(randomForest)
install.packages("randomForest")
install.packages("randomForestSRC")
install.packages("caret")
install.packages(c("MASS", "mgcv", "nlme", "survival"))
install.packages("tidyverse")
install.packages("RcppArmadillo")
install.packages("glmnet")
install.packages("rstan")
file.edit("~/.Renviron")
unlink("~/.R/Makevars")
install.packages("rstan")
install.packages("rstan")
install.packages("rstanarm")
diag(2)
eigen(diag(2))
svd(diag(2))
0.8 * 0.1 - 0.2 * 0.8
0.8 * 0.7 - 0.2 * 0.3
m = matrix(c(0.8, 0.2, 0.3, 0.7), nrow=2,ncol=2)
m
m = t(m)
m
solve(m)
q = c(0.9, 0.1)
q
solve(m) %*% q
t(q)
t(t(q))
solve(m) %*% t(t(q))
m = t(matrix(c(0.9, 0.1, 0.2, 0.8), nrow=2,ncol=2))
m
solve(m) %*% t(t(q))
y = rnorm(100)
x1 = c(rep("a", 99), "b")
x1
x2 = c("c", rep("d", 99))
lm(y ~ x1
+ x2)
m=lm(y ~ x1
+ x2)
summary(m)
install.packages("DescTools")
library(DescTools)
BinomCI(5, 9800)
5/9800
BinomCI(5, 9800, type = "wilson")
BinomCI(5, 9800, method = "wilson")
BinomCI(5, 9800, method = "wilsoncc")
BinomCI(5, 9800, method = "agresti-coull")
BinomCI(5, 9800, method = "modified wilson")
m = 5/9900
s = sqrt(m*(1-m)/9900)
s / m
dd = as.Date("2017-12-01")
dd
dd - 4
dd - 741
x = c(https://www.avclub.com/c/tv-review/the-great-british-baking-show)
?cos
acos(
1/4
)
acos(1/4)
acos(1/2)
pi/4
pi/3
?glm
x = rnorm(1000)
y = rbinom(1000, 1, 0.4)
m = glm(y~x, family="poisson")
summary(m)
rexp(4)
n <- 1000
x <- rnorm(n)
a <- c(1, rep(0, n - 1))
m <- lm(a ~ x)
m
plogis(z)
plogis(x)
plogis(x - 10)
n <- 1000
x <- c(10, rnorm(n - 1))
a <- c(1, rep(0, n - 1))
m <- lm(a ~ x)
m
predict(m)
predict(m)[1]
predict(m)
p_hat <- as.numeric(predict(m))
sum(x[-1] * p_hat[-1]) / sum(p_hat[-1])
p_hat
n <- 1000
x <- c(10, rnorm(n - 1, 1, 1))
a <- c(1, rep(0, n - 1))
m <- lm(a ~ x)
p_hat <- as.numeric(predict(m))
sum(x[-1] * p_hat[-1]) / sum(p_hat[-1])
library(tidyverse) # For data manipulation
library(tidymodels) # For PCA
library(tidytext) # For reorder_within()
library(extrafont) # For custom fonts on graphs
library(glue) # For creating strings from multiple pieces
library(ggtext) # For fine-grained text formatting
library(plotly) # For interactive graphs
# These are to make tables look nice on the website
# You probably won't need them
library(knitr)
library(kableExtra)
theme_set(theme_void())
personalities <- read_tsv("https://raw.githubusercontent.com/tacookson/data/master/fictional-character-personalities/personalities.txt")
install.packages(c("extrafont", "ggtext", "kableExtra", "plotly", "tidymodels", "tidytext"))
install.packages(c("extrafont", "ggtext", "kableExtra", "plotly", "tidymodels", "tidytext"))
install.packages(c("extrafont", "ggtext", "kableExtra", "plotly", "tidymodels", "tidytext"))
install.packages(c("extrafont", "ggtext", "kableExtra", "plotly", "tidymodels", "tidytext"))
rm(list=ls())
library(tidyverse) # For data manipulation
library(tidymodels) # For PCA
library(tidytext) # For reorder_within()
library(extrafont) # For custom fonts on graphs
library(glue) # For creating strings from multiple pieces
library(ggtext) # For fine-grained text formatting
library(plotly) # For interactive graphs
# These are to make tables look nice on the website
# You probably won't need them
library(knitr)
library(kableExtra)
theme_set(theme_void())
personalities <- read_tsv("https://raw.githubusercontent.com/tacookson/data/master/fictional-character-personalities/personalities.txt")
pride_palette <- c("#19313b", "#3b636b", "#bbb6a2",
"#ffc277", "#bc652f", "#472411")
pride_example <- personalities %>%
filter(!is_emoji,
fictional_work == "Pride and Prejudice",
character_name %in% c("Elizabeth Bennet", "Jane Bennet", "Lydia Bennet",
"Mr. Darcy", "Mr. William Collins", "George Wickham")) %>%
mutate(character_name = ifelse(character_name == "Mr. William Collins", "Mr. Collins", character_name)) %>%
group_by(character_name) %>%
top_n(8, abs(mean)) %>%
ungroup() %>%
mutate(spectrum_label = ifelse(mean > 0,
glue("{spectrum_high}<br><span style='font-size:8pt'>({spectrum_low})</span>"),
glue("{spectrum_low}<br><span style='font-size:8pt'>({spectrum_high})</span>")),
mean = abs(mean),
spectrum_label = reorder_within(spectrum_label, mean, character_name))
pride_example
pride_example %>%
ggplot() +
geom_col(aes(mean, spectrum_label, fill = character_name), show.legend = FALSE) +
geom_vline(xintercept = seq(0, 50, by = 10), colour = "#FFF1E6", size = 0.1) +
scale_y_reordered() +
scale_fill_manual(values = pride_palette) +
expand_limits(x = c(0, 50)) +
facet_wrap(~ character_name, scales = "free_y") +
labs(title = "Pride and Prejudice",
caption = "Visualization: @alexcookson | Data: Open Source Psychometrics Project") +
theme(plot.title = element_text(family = "JaneAusten", face = "bold", size = 30,
hjust = 0.5, margin = margin(t = 10, b = 20)),
plot.background = element_rect(fill = "#FFF1E6", colour = NA),
plot.margin = margin(10, 10, 10, 10),
plot.caption = element_text(family = "Sylfaen", size = 8, colour = "grey50", margin = margin(t = 10)),
strip.text = element_text(family = "JaneAusten", size = 12, margin = margin(b = 10)),
axis.text.x = element_text(family = "Sylfaen", size = 10, hjust = 0.5),
axis.text.y = element_markdown(family = "Sylfaen", size = 11, hjust = 1))
pride_example %>%
ggplot() +
geom_col(aes(mean, spectrum_label, fill = character_name), show.legend = FALSE) +
geom_vline(xintercept = seq(0, 50, by = 10), colour = "#FFF1E6", size = 0.1) +
scale_y_reordered() +
scale_fill_manual(values = pride_palette) +
expand_limits(x = c(0, 50)) +
facet_wrap(~ character_name, scales = "free_y") +
labs(title = "Pride and Prejudice",
caption = "Visualization: @alexcookson | Data: Open Source Psychometrics Project")
pride_example %>%
ggplot() +
geom_col(aes(mean, spectrum_label, fill = character_name), show.legend = FALSE) +
geom_vline(xintercept = seq(0, 50, by = 10), colour = "#FFF1E6", size = 0.1) +
scale_y_reordered() +
scale_fill_manual(values = pride_palette) +
expand_limits(x = c(0, 50)) +
facet_wrap(~ character_name, scales = "free_y") +
labs(title = "Pride and Prejudice",
caption = "Visualization: @alexcookson | Data: Open Source Psychometrics Project") +
theme(plot.title = element_text(family = "JaneAusten", face = "bold", size = 30,
hjust = 0.5, margin = margin(t = 10, b = 20)),
plot.background = element_rect(fill = "#FFF1E6", colour = NA),
plot.margin = margin(10, 10, 10, 10),
plot.caption = element_text(family = "Sylfaen", size = 8, colour = "grey50", margin = margin(t = 10)),
strip.text = element_text(family = "JaneAusten", size = 12, margin = margin(b = 10)),
axis.text.x = element_text(family = "Sylfaen", size = 10, hjust = 0.5),
axis.text.y = element_markdown(family = "Sylfaen", size = 11, hjust = 1))
devtools::install_github("asondhi/glmfunk")
install.packages("devtools")
devtools::install_github("asondhi/glmfunk")
devtools::install_github("asondhi/glmfunk")
setwd("~/glmfunk/src")
library(RcppArmadillo)
libnrary(Rcpp)
library(Rcpp)
sourceCpp("funk_all.cpp")
devtools::install_github("asondhi/glmfunk")
